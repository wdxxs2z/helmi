apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "fullname" . }}-catalog
data:
  kubeconfig.yaml:
    apiVersion: v1
    kind: Config
    clusters:
    - cluster:
        certificate-authority: "/app/tls/ca.pem"
        server: {{ .Values.kubeconfig.server }}
      name: kubernetes
    contexts:
    - context:
        cluster: {{ .Values.kubeconfig.cluster }}
        user: {{ .Values.kubeconfig.username }}
      name: {{ .Values.kubeconfig.currentContext }}
    current-context: {{ .Values.kubeconfig.currentContext }}
    users:
    - name: {{ .Values.kubeconfig.username }}
      user:
{{ toYaml .Values.kubeconfig.userSet | indent 8 }}
  catalog.yaml: |
    log_level: {{ .Values.service_config.loglevel }}
    username: {{ .Values.helmi.username }}
    password: {{ .Values.helmi.password }}
    platform: {{ .Values.service_config.platform }}
    helmi_config:
      allow_user_provision_parameters: {{ .Values.service_config.allow_user_provision_parameters }}
      allow_user_update_parameters: {{ .Values.service_config.allow_user_update_parameters }}
      allow_user_bind_parameters: {{ .Values.service_config.allow_user_bind_parameters }}
      catalog:
        services:
        -
          _id: ab53df4d-c279-4880-94f7-65e7d72b7834
          _name: mariadb
          description: "MariaDB as a Service"
          bindable: true
          plan_updatable: true
          tags:
          - mysql
          - mariadb
          metadata:
            displayName: "Kubernetes Helm Mariadb Service"
            imageUrl: "https://mariadb.org/wp-content/uploads/2015/05/MariaDB-Foundation-horizontal-x52.png"
            longDescription: "Kubernetes Helm Mariadb Service"
            providerDisplayName: "Kubernetes Helm Mariadb Service"
            documentationUrl: "https://github.com/kubernetes/charts/tree/master/stable/mariadb"
            supportUrl: "https://mariadb.org/"
          chart: {{ .Values.service_config.services.mariadb.chart }}
          chart-version: {{ .Values.service_config.services.mariadb.chart_version }}
          chart-values:
            mariadbUser: "\{\{ lookup('username', 'mariadbUser') \}\}"
            mariadbPassword: "\{\{ lookup('password', 'mariadbPassword') \}\}"
            mariadbRootPassword: "\{\{ lookup('password', 'mariadbRootPassword') \}\}"
            mariadbDatabase: db
          user-credentials:
            uri: "mysql://\{\{ lookup('username', 'mariadbUser') \}\}:\{\{ lookup('password', 'mariadbPassword') \}\}@\{\{ lookup('release', 'name') \}\}-mariadb.\{\{ lookup('release', 'namespace') \}\}.svc.cluster.local:\{\{ lookup('cluster', 'port') \}\}/\{\{ lookup('value', 'mariadbDatabase') \}\}"
            jdbcUrl: "jdbc:mysql://\{\{ lookup('release', 'name') \}\}-mariadb.\{\{ lookup('release', 'namespace') \}\}.svc.cluster.local:\{\{ lookup('cluster', 'port') \}\}/\{\{ lookup('value', 'mariadbDatabase') \}\}?user=\{\{ lookup('username', 'mariadbUser') \}\}\u0026password=\{\{ lookup('password', 'mariadbPassword') \}\}"
            username: "\{\{ lookup('username', 'mariadbUser') \}\}"
            password: "\{\{ lookup('password', 'mariadbPassword') \}\}"
            database: "\{\{ lookup('value', 'mariadbDatabase') \}\}"
            hostname: "\{\{ lookup('release', 'name') \}\}-mariadb.\{\{ lookup('release', 'namespace') \}\}.svc.cluster.local"
            port: "\{\{ lookup('cluster', 'port') \}\}"
          plans:
          -
            _id: e79306ef-4e10-4e3d-b38e-ffce88c90f59
            _name: free
            description: "Free MariaDB Instance"
            bindable: true
            free: true
            metadata:
              costs:
                - amount:
                    usd: 0.1
                  unit: MONTHLY
              bullets:
                - Single node mariadb service
            chart-values:
              persistence.enabled: false
              persistence.size: 8Gi
              persistence.storageClass: local-storage
              serviceType: ClusterIP
        -
          _id: 8dda5a6f-f796-4b52-806f-4129d7576d6e
          _name: minio
          description: "S3 Object Store as a Service"
          bindable: true
          plan_updatable: true
          tags:
          - minio
          - private cloud storage
          metadata:
            displayName: "Kubernetes Helm Minio Service"
            imageUrl: ""
            longDescription: "Kubernetes Helm Minio Service"
            providerDisplayName: "Kubernetes Helm Minio Service"
            documentationUrl: "https://github.com/kubernetes/charts/tree/master/stable/minio"
            supportUrl: "https://www.minio.io/"
          chart: {{ .Values.service_config.services.minio.chart }}
          chart-version: {{ .Values.service_config.services.minio.chart_version }}
          chart-values:
            mode: "standalone"
            accessKey: "AKIAIOSFODNN7EXAMPLE"
            secretKey: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
          user-credentials:
            uri: "http://\{\{ lookup('value', 'accessKey') \}\}:\{\{ lookup('value', 'secretKey') \}\}@\{\{ lookup('release', 'name') \}\}-minio.\{\{ lookup('release', 'namespace') \}\}.svc.cluster.local:\{\{ lookup('cluster', 'port') \}\}/"
            endpoint: "\{\{ lookup('cluster', 'address') \}\}:\{\{ lookup('cluster', 'port') \}\}"
            accessKey: "\{\{ lookup('value', 'accessKey') \}\}"
            secretKey: "\{\{ lookup('value', 'secretKey') \}\}"
            hostname: "\{\{ lookup('release', 'name') \}\}-minio.\{\{ lookup('release', 'namespace') \}\}.svc.cluster.local"
            port: "\{\{ lookup('cluster', 'port') \}\}"
            region: "us-west-1"
            pathStyleAccess: true
          plans:
          -
            _id: f003f191-c250-4e85-9abd-038af629ad71
            _name: free
            description: "Free S3 Object Store Instance"
            bindable: true
            free: true
            metadata:
              costs:
                - amount:
                    usd: 0.0
                  unit: MONTHLY
              bullets:
                - free s3 object store service
            chart-values:
              persistence.size: 8Gi
              persistence.storageClass: local-storage
        -
          _id: 2f1e7c63-0511-4209-aa7f-6bdee7ffb2b6
          _name: "rabbitmq"
          description: "RabbitMQ as a Service"
          bindable: true
          plan_updatable: true
          tags:
          - rabbitmq
          - mq
          metadata:
            displayName: "Kubernetes Helm RabbitMQ Service"
            imageUrl: ""
            longDescription: "Kubernetes Helm RabbitMQ Service"
            providerDisplayName: "Kubernetes Helm RabbitMQ Service"
            documentationUrl: "https://github.com/kubernetes/charts/tree/master/stable/rabbitmq"
            supportUrl: "https://mariadb.org/"
          chart: {{ .Values.service_config.services.rabbitmq.chart }}
          chart-version: {{ .Values.service_config.services.rabbitmq.chart_version }}
          chart-values:
            rabbitmqUsername: "\{\{ lookup('username', 'rabbitmqUsername') \}\}"
            rabbitmqPassword: "\{\{ lookup('password', 'rabbitmqPassword') \}\}"
          user-credentials:
            uri: "amqp://\{\{ lookup('username', 'rabbitmqUsername') \}\}:\{\{ lookup('password', 'rabbitmqPassword') \}\}@\{\{ lookup('release', 'name') \}\}-rabbitmq.\{\{ lookup('release', 'namespace') \}\}.svc.cluster.local:\{\{ lookup('cluster', 'port:5672') \}\}/"
            username: "\{\{ lookup('username', 'rabbitmqUsername') \}\}"
            password: "\{\{ lookup('password', 'rabbitmqPassword') \}\}"
            hostname: "\{\{ lookup('release', 'name') \}\}-rabbitmq.\{\{ lookup('release', 'namespace') \}\}.svc.cluster.local"
            port: "\{\{ lookup('cluster', 'port:5672') \}\}"
            vhost: ""
            ssl: false
          plans:
          -
            _id: d2badac0-8e41-4588-a9fc-0e662c480610
            _name: free
            description: "Free RabbitMQ Instance"
            bindable: true
            free: true
            metadata:
              costs:
                - amount:
                    usd: 0.0
                  unit: MONTHLY
              bullets:
                - Single node rabbitmq service
            chart-values:
              persistence.size: 8Gi
              persistence.storageClass: local-storage
        -
          _id: b4280104-b578-4156-a69c-8961bcdfa8c0
          _name: "mongodb"
          description: "MongoDB as a Service"
          bindable: true
          plan_updatable: true
          tags:
          - mongodb
          - nosql
          metadata:
            displayName: "Kubernetes Helm Mongodb Service"
            imageUrl: "https://webassets.mongodb.com/_com_assets/global/mongodb-logo-white.png"
            longDescription: "Kubernetes Helm Mongodb Service"
            providerDisplayName: "Kubernetes Helm Mongodb Service"
            documentationUrl: "https://github.com/kubernetes/charts/tree/master/stable/mongodb"
            supportUrl: "https://www.mongodb.com/"
          chart: {{ .Values.service_config.services.mongodb.chart }}
          chart-version: {{ .Values.service_config.services.mongodb.chart_version }}
          chart-values:
            mongodbUsername: "\{\{ lookup('username', 'mongodbUsername') \}\}"
            mongodbPassword: "\{\{ lookup('password', 'mongodbPassword') \}\}"
            mongodbRootPassword:  "\{\{ lookup('password', 'mongodbRootPassword') \}\}"
            mongodbDatabase: db
          user-credentials:
            uri: "mongodb://\{\{ lookup('username', 'mongodbUsername') \}\}:\{\{ lookup('password', 'mongodbPassword') \}\}@\{\{ lookup('release', 'name') \}\}-mongodb.\{\{ lookup('release', 'namespace') \}\}.svc.cluster.local:\{\{ lookup('cluster', 'port') \}\}/\{\{ lookup('value', 'mongodbDatabase') \}\}"
            username: "\{\{ lookup('username', 'mongodbUsername') \}\}"
            password: "\{\{ lookup('password', 'mongodbPassword') \}\}"
            database: "\{\{ lookup('value', 'mongodbDatabase') \}\}"
            hostname: "\{\{ lookup('release', 'name') \}\}-mongodb.\{\{ lookup('release', 'namespace') \}\}.svc.cluster.local"
            port: "\{\{ lookup('cluster', 'port') \}\}"
          plans:
          -
            _id: 905b1f0e-c815-41d4-b3e4-6ccb602b9e8e
            _name: free
            description: "Free MongoDB Instance"
            bindable: true
            free: true
            metadata:
              costs:
                - amount:
                    usd: 0.0
                  unit: MONTHLY
              bullets:
                - Single node mongodb service
            chart-values:
              persistence.size: 8Gi
              persistence.storageClass: local-storage
        -
          _id: c26e6c7a-fe17-4568-ac4c-46545ab1d178
          _name: "redis"
          description: "Redis as a Service"
          bindable: true
          plan_updatable: true
          tags:
          - redis
          - key value database
          metadata:
            displayName: "Kubernetes Helm Redis Service"
            imageUrl: "https://redis.io/images/redis-white.png"
            longDescription: "Kubernetes Helm Redis Service"
            providerDisplayName: "Kubernetes Helm Redis Service"
            documentationUrl: "https://github.com/kubernetes/charts/tree/master/stable/redis"
            supportUrl: "https://redis.io/"
          chart: {{ .Values.service_config.services.redis.chart }}
          chart-version: {{ .Values.service_config.services.redis.chart_version }}
          chart-values:
            redisPassword: "\{\{ lookup('password', 'redisPassword') \}\}"
          user-credentials:
            uri: "redis://:\{\{ lookup('password', 'redisPassword') \}\}@\{\{ lookup('release', 'name') \}\}-redis.\{\{ lookup('release', 'namespace') \}\}.svc.cluster.local:\{\{ lookup('cluster', 'port') \}\}"
            password: "\{\{ lookup('password', 'redisPassword') \}\}"
            hostname: "\{\{ lookup('cluster', 'address') \}\}"
            port: "\{\{ lookup('cluster', 'port') \}\}"
          plans:
          -
            _id: 381c8dd1-676b-4d1f-ae00-97e8304f966f
            _name: free
            description: "Free Redis Instance"
            bindable: true
            free: true
            metadata:
              costs:
                - amount:
                    usd: 0.0
                  unit: MONTHLY
              bullets:
                - Single node redis service
            chart-values:
              persistence.size: 8Gi
              persistence.storageClass: local-storage
        -
          _id: 201cb950-e640-4453-9d91-4708ea0a1342
          _name: "cassandra"
          description: "Cassandra as a Service"
          bindable: true
          plan_updatable: true
          tags:
          - cassandra
          - nosql
          metadata:
            displayName: "Kubernetes Helm Cassandra Service"
            imageUrl: ""
            longDescription: "Kubernetes Helm Cassandra Service"
            providerDisplayName: "Kubernetes Helm Cassandra Service"
            documentationUrl: ""
            supportUrl: ""
          chart: {{ .Values.service_config.services.cassandra.chart }}
          chart-version: {{ .Values.service_config.services.cassandra.chart_version }}
          chart-values:
            cassandraUsername: "\{\{ lookup('username', 'cassandraUsername') \}\}"
            cassandraPassword: "\{\{ lookup('password', 'cassandraPassword') \}\}"
          user-credentials:
            jdbcUrl: "jdbc:cassandra://\{\{ lookup('username', 'cassandraUsername') \}\}:\{\{ lookup('password', 'cassandraPassword') \}\}@\{\{ lookup('release', 'name') \}\}-cassandra.\{\{ lookup('release', 'namespace') \}\}.svc.cluster.local:\{\{ lookup('cluster', 'port:9042') \}\}"
            uri: "cassandra://\{\{ lookup('username', 'cassandraUsername') \}\}:\{\{ lookup('password', 'cassandraPassword') \}\}@\{\{ lookup('release', 'name') \}\}-cassandra.\{\{ lookup('release', 'namespace') \}\}.svc.cluster.local:\{\{ lookup('cluster', 'port:9042') \}\}"
            node_ips:
            - "\{\{ lookup('release', 'name') \}\}-cassandra.\{\{ lookup('release', 'namespace') \}\}.svc.cluster.local"
            cql_port: "\{\{ lookup('cluster', 'port:9042') \}\}"
            thrift_port: "\{\{ lookup('cluster', 'port:9160') \}\}"
            username: "\{\{ lookup('username', 'cassandraUsername') \}\}"
            password: "\{\{ lookup('password', 'cassandraPassword') \}\}"
          plans:
          -
            _id: 169d5466-12c9-4a89-a063-f72048b3d4c4
            _name: free
            description: "Free 3 Node Cassandra Instance"
            bindable: true
            free: true
            metadata:
              costs:
                - amount:
                    usd: 0.0
                  unit: MONTHLY
              bullets:
                - cassandra service
            chart-values:
              persistence.size: 8Gi
              persistence.storageClass: local-storage
          -
            _id: 7b16d6aa-260a-4b8d-b12c-464d2cedb9d0
            _name: dev
            description: "Single Node Development Instance"
            bindable: true
            free: true
            metadata:
              costs:
                - amount:
                    usd: 0.0
                  unit: MONTHLY
              bullets:
                - cassandra service
            chart-values:
              persistence.size: 8Gi
              persistence.storageClass: local-storage
              replicaCount: 1
              replicaMinAvailable: 0
        -
          _id: 777f5478-5796-426a-ab8a-5d3dc5e1bdcc
          _name: "muescheli"
          description: "Virusscan as a Service"
          bindable: true
          plan_updatable: true
          tags:
          - muescheli
          - Virusscan
          metadata:
            displayName: "Kubernetes Helm Virusscan Service"
            imageUrl: ""
            longDescription: "Kubernetes Helm Virusscan Service"
            providerDisplayName: "Kubernetes Helm Virusscan Service"
            documentationUrl: ""
            supportUrl: ""
          chart: {{ .Values.service_config.services.muescheli.chart }}
          chart-version: {{ .Values.service_config.services.muescheli.chart_version }}
          chart-values:
            environment.no_proxy: "\{\{ lookup('env', 'no_proxy') \}\}"
            environment.http_proxy: "\{\{ lookup('env', 'http_proxy') \}\}"
            environment.https_proxy: "\{\{ lookup('env', 'https_proxy') \}\}"
            muescheliUsername: "\{\{ lookup('username', 'muescheliUsername') \}\}"
            muescheliPassword: "\{\{ lookup('password', 'muescheliPassword') \}\}"
          user-credentials:
            uri: "http://\{\{ lookup('username', 'muescheliUsername') \}\}:\{\{ lookup('password', 'muescheliPassword') \}\}@\{\{ lookup('release', 'name') \}\}-muescheli.\{\{ lookup('release', 'namespace') \}\}.svc.cluster.local:\{\{ lookup('cluster', 'port:8091') \}\}"
            port: "\{\{ lookup('cluster', 'port:8091') \}\}"
            hostname: "\{\{ lookup('release', 'name') \}\}-muescheli.\{\{ lookup('release', 'namespace') \}\}.svc.cluster.local"
            username: "\{\{ lookup('username', 'muescheliUsername') \}\}"
            password: "\{\{ lookup('password', 'muescheliPassword') \}\}"
          plans:
          -
            _id: 75b7b1de-70ef-4499-b55c-e2337d320626
            _name: free
            description: "Free ClamAV Rest Instance"
            bindable: true
            free: true
            metadata:
              costs:
                - amount:
                    usd: 0.0
                  unit: MONTHLY
              bullets:
                - clamAV anti-virus service